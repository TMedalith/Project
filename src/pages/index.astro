---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Crypto">
    <div
        class="min-h-screen flex items-center justify-center bg-white"
    >
        <div
            class=" bg-gradient-to-br from-orange-100 to-orange-300 p-8 rounded-lg shadow-xl w-full max-w-3xl md:w-3/4 lg:w-1/2"
        >
            <h1 class="text-3xl font-bold text-center mb-6 text-orange-500">
                Crypto Application
            </h1>

            <form id="cryptoForm">
                <div class="mb-4">
                    <label
                        for="option1"
                        class="block text-gray-700 font-medium mb-2"
                        >Action:</label
                    >
                    <select
                        id="option1"
                        class="w-full p-2.5 outline-none rounded-md focus:ring focus:ring-orange-200 bg-white text-gray-700"
                    >
                        <option value="1">Encrypt</option>
                        <option value="2">Decrypt</option>
                    </select>
                </div>

                <div class="mb-4">
                    <label
                        for="option2"
                        class="block  text-gray-700 font-medium mb-2"
                        >Key Type:</label
                    >
                    <select
                        id="option2"
                        class="w-full p-2.5 outline-none rounded-md focus:ring focus:ring-orange-200 bg-white text-gray-700"
                    >
                        <option value="1">Private</option>
                        <option value="2">Public</option>
                    </select>
                </div>

                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                        <label
                            for="key1"
                            class="block text-gray-700 font-medium mb-2"
                            >Key Part 1:</label
                        >
                        <input
                            type="number"
                            id="key1"
                            class="w-full p-2.5 outline-none   rounded-md focus:ring focus:ring-orange-200 bg-white text-gray-700"
                            required
                        />
                    </div>
                    <div>
                        <label
                            for="key2"
                            class="block text-gray-700 font-medium mb-2"
                            >Key Part 2:</label
                        >
                        <input
                            type="number"
                            id="key2"
                            class="w-full p-2.5  outline-none rounded-md focus:ring focus:ring-orange-200 bg-white text-gray-700"
                            required
                        />
                    </div>
                </div>

                <div class="mb-4">
                    <label
                        for="message"
                        class="block text-gray-700 font-medium mb-2"
                        >Message:</label
                    >
                    <textarea
                        id="message"
                        class="w-full p-2.5 border outline-none rounded-md  focus:ring focus:ring-orange-200 bg-white text-gray-800"
                        rows="1" 
                        required></textarea>
                </div>

                <button
                    type="submit"
                    class="w-full p-2.5 bg-orange-500 hover:bg-orange-600 text-white font-semibold rounded-md focus:outline-none focus:ring focus:ring-orange-200"
                >
                    Process
                </button>
            </form>
            <div
                id="results"
                class="mt-6 p-4 bg-orange-50 rounded-lg border border-orange-200"
            >
            </div>

            <div id="char-mapping-container" class="flex flex-wrap gap-4 items-center mt-4">
            </div>
        </div>
    </div>
</Layout>

<script  is:inline>
document
.getElementById("cryptoForm")
.addEventListener("submit", async (event) => {
    event.preventDefault();

    const results = document.getElementById("results");
    results.innerHTML = "";
    const option1 = parseInt(document.getElementById("option1").value);
    const option2 = parseInt(document.getElementById("option2").value);
    const key1 = parseInt(document.getElementById("key1").value);
    const key2 = parseInt(document.getElementById("key2").value);
    const message = document.getElementById("message").value.toUpperCase();

   
    let tabla = [];
    let mensaje = message;

    console.log(option1, option2, key1, key2, message);

    
    let n,
        d,
        e,
        p = 2,
        q = 2,
        euler;
    n = key1;



   if(option1==1 && option2==1){
    console.log("entro");
    //clave privada (n,d): 21 , 5 . encripta "LIZ"
       d = key2;
       while (p * q !== n) {
        if (p * q > n) {
            q = 2;
            p++;
        } else if (p * q < n) {
            q++;
        }
    }
        console.log(p, q);
        euler = (p - 1) * (q - 1);
        console.log(e, d, n, p, q);
        e = 1;
        console.log(e, d, n);
        while ((d * e) % euler != 1) {
            e++;
        }
        console.log(e, d, n);

        results.innerHTML += `<p>Su clave privada es: (${n}, ${d})</p><p>Por tanto, su clave pública sería: (${n}, ${e})</p>`;
   }else if(option1==1 && option2==2){
          //si me piden encriptar y me dan la clave publica
        e = key2;
        results.innerHTML += `<p>Su clave pública es: (${n}, ${e})</p>`;
  
    }else if(option1==2 && option2==1){
        //si me piden desencriptar y me dan la clave privada
        d = key2;
        results.innerHTML += `<p>Su clave privada sería: (${n}, ${d})</p>`;
  
    }else if(option1==2 && option2==2){
        //si me piden desencriptar y me dan la clave publica
        e = key2;
        while (p * q !== n) {
        if (p * q > n) {
            q = 2;
            p++;
        } else if (p * q < n) {
            q++;
        }
    }
    console.log(e, d, n, p, q);
        euler = (p - 1) * (q - 1);
        d = 1;
        while ((d * e) % euler != 1) {
            d++;
        }
        results.innerHTML += `<p>Su clave pública es: (${n}, ${e})</p><p>Por tanto, su clave privada sería: (${n}, ${d})</p>`;
  
    }

    

    let charMappingTable = null;
    const charMappingContainer = document.getElementById(
        "char-mapping-container",
    );

    if (charMappingContainer) {
        charMappingContainer.innerHTML = `
<h2 class="text-lg w-full font-semibold mb-4">Ingrese los caracteres correspondientes:</h2>
<div id="char-mapping-container" class="flex flex-wrap gap-4 items-center  mt-4">
</div>`; // Initialize container first

        const mappingContainer = document.getElementById(
            "char-mapping-container",
        ); // Get the container reference

        for (let i = 0; i <=n; i++) {
            mappingContainer.innerHTML += ` 
    <div class="flex flex-col text-center">
        <label for="char${i}" class="text-sm font-medium text-gray-700">${ i}</label> 
        <input type="text" id="char${i}" maxlength="1" class="mt-1 w-10 p-1 shadow-sm border-2 focus:ring-orange-500 focus:border-orange-500 outline-none sm:text-sm border-orange-300 rounded-md" onkeydown="if (event.keyCode === 13) document.getElementById('char' + (parseInt(this.id.replace('char', '')) + 1)).focus()" required>
    </div>`;
        }

        const submitButton = document.createElement("button");
        submitButton.id = "char-mapping-submit";
        submitButton.className =
            "w-full p-2.5 mt-4 bg-orange-500 hover:bg-orange-600 text-white font-semibold rounded-md focus:outline-none focus:ring focus:ring-orange-200";
        submitButton.innerText = "Procesar";
        submitButton.onclick = function () {
            for (let i = 0; i < n; i++) {
                tabla[i] = document.getElementById(`char${i}`).value.toUpperCase();
            }

            let finalResult = "";

            if (option1 == 1) {
                // Encrypt
                let mensajecifrado = "";
                for (let i = 0; i < mensaje.length; i++) {
                    for (let k = 0; k < n; k++) {
                        if (mensaje[i] === tabla[k]) {
                            let num = k;
                            let numconv = Math.pow(num, e) % n;
                            for (let j = 0; j < n; j++) {
                                if (j === numconv) {
                                    mensajecifrado += tabla[j];
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                finalResult = `<p>Al encriptar ${mensaje} se obtiene: ${mensajecifrado}</p>`;
            } else if (option1 == 2) {
                // Decrypt (Corrected comparison)
                let mensajecifrado = mensaje;
                let mensajeDescifrado = "";
                for (let i = 0; i < mensajecifrado.length; i++) {
                    for (let k = 0; k < n; k++) {
                        if (mensajecifrado[i] === tabla[k]) {
                            let num = k;
                            let c = Math.pow(num, d) % n;
                            for (let j = 0; j < n; j++) {
                                if (j === c) {
                                    mensajeDescifrado += tabla[j];
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                finalResult = `<p>Al desencriptar ${mensajecifrado} se obtiene: ${mensajeDescifrado}</p>`;
            }

            results.innerHTML += finalResult;
        };

        charMappingContainer.appendChild(submitButton);

        const inputs = charMappingTable.getElementsByTagName("input");
        for (let i = 0; i < inputs.length; i++) {
            inputs[i].addEventListener("keydown", function (event) {
                if (event.key === "Tab" && i < inputs.length - 1) {
                    event.preventDefault();
                    inputs[i + 1].focus();
                }
            });
        }
    } else {
        console.error(
            "Element with id 'char-mapping-container' not found",
        );
    }
});
</script>
